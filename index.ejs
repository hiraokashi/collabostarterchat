<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>CollaboStarterChat</title>
  <meta content="width=device-width, initial-scale=1.0" name="viewport" />
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
  <link rel="shortcut icon" href="favicon.ico">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
	<script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
</head>
<body>
  <div class="container">
    <input type="hidden" id="myName" value=<%= user %>></input>
    <div id="chatform" class="panel panel-info">
    	<div class="panel-heading">
    		<h4>
    			<span class="label label-info" id="user_name_area"><span class="glyphicon glyphicon-user"> ユーザー名</span>：<%= user %></span>
          <span><button id="removeuser" class="btn btn-sm btn-danger"　>退室</button></span>
    		</h4>

    	</div>
    	<div class="panel-body">
    		<div class="col-lg-6">
    			<div class="input-group">
    				<span class="input-group-addon"><span class="glyphicon glyphicon-pencil"></span></span>
            <textarea id="message" name="message" class="form-control" rows="3"></textarea>
    				<div class="input-group-btn">
    					<button id="send" class="btn btn-primary"　>送信</button>
    				</div>
    			</div>
    			<!-- /input-group -->
    		</div>
    		<!-- /.col-lg-6 -->

    	</div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <div id="msg">
          <% for (var i = 0; i < previousMsgs.count; i++) { %>
            <li class="alert alert-info"><%= previousUsrs.get(i) %><small><%= previousMsgs.get(i).time %></small><div><%= previousMsgs.get(i).value %></div></li>
          <% } %>
        </div>
      </div>
    </div>
    <div id="toppage" class="jumbotron" style="margin-top:10px; color:white; background-color:#3BAFDA">
		  <h1>
			   <span class="glyphicon glyphicon-comment"></span>CollaboStarterChat
		  </h1>
		  <h3>
			   powered by Node.js v0.12.7
		  </h3>
	  </div>
  	<div id="loginform"　class="form-group">
				<div class="col-lg-6">
					<div class="input-group">
						<span class="input-group-addon">ユーザー名</span>
						<input id="inputuser" type="text" name="username" class="form-control" placeholder="ユーザー名" required autofocus maxlength="20">
						<div class="input-group-btn">
							<button id="login" class="btn btn-success" type="submit">
								<span class="glyphicon glyphicon-log-in"> 開始!</span>
							</button>
						</div>
					</div>
					<!-- /input-group -->
				</div>
				<!-- /.col-lg-6 -->
    		<div id="userlistroot" class="col-lg-6">
          <p>参加ユーザ</p>
          <% for (var i = 0; i < users.length; i++) { %>
            <span class="label label-default userlist" id="<%= users[i] %>"><%= users[i] %></span>
          <% } %>
    		</div>
    		<!-- /.col-lg-6 -->
		</div>
  </div>


  <script src="/socket.io/socket.io.js"></script>
  <script type="text/javascript">
    //--------------------------------------------
    // 1.サーバーからのイベントとコールバックの定義
    //--------------------------------------------
    var socketio = io.connect();

    socketio.on("connected", function(name) {});
    socketio.on("publish", function (data) { viewFunctions[data.type](data.value, data.user, data.time); });
    socketio.on("disconnect", function () {});

    //-----------------------------------------------------------
    // 2.サーバからのイベントをトリガーに、ビューへの更新処理　のリスト
    //-------------------------------------------------------
    var viewFunctions = {
    //..入室通知用
    start:
      function addMsgStart (msg, user, time) {
        var domMsg = $('<li>').append($('<small>').append(time));
        domMsg.addClass('alert alert-success').append($('<div>').append(user + 'が' + msg));

        msgArea.prepend(domMsg);
        var user_name = $('<span></span>').addClass('label label-default userlist').attr('id', 'user_' + user).text(user);
        $('#userlistroot').append(user_name);
      },

    //..退室通知用
    removeuser:
      function addMsgEnd (msg, user, time) {
        var domMsg = $('<li>').append($('<small>').append(time));
        domMsg.addClass('alert alert-danger').append($('<div>').append(user + 'が' + msg));

        msgArea.prepend(domMsg);
        $('#user_' + user ).remove();

        //２つ部ブラウザを立ち上げた時の対応　自分の退室指示をうけとったら初期化する
        if ($('#myName').val() == user) {
          $('#loginform').show();
          $('#chatform').hide();
          $('#msg').hide();
          $('#user_name_area').html('<span class="glyphicon glyphicon-user"> ユーザー名</span>:');
          $('#myName').val('');
        }
      },
    //..その他のメッセージ
    publish:
      function addMsgNormal (msg, user, time) {
        var domMsg = $('<li>').append($('<small>').append(time ));
        domMsg.addClass('alert alert-info').append($('<div>').html(msg)).children('small').prepend(user + '：');
        msgArea.prepend(domMsg);
      }
    }

    //---------------------------------------------
    // 3.ローカル→サーバーへ通知するイベントに絡ませる関数の定義
    //---------------------------------------------
    //入室
    function start(name) {
      $('#loginform').hide();
      $('#chatform').show();
      $('#msg').show();
      $('#user_name_area').html('<span class="glyphicon glyphicon-user"> ユーザー名</span>:' + name);
      $('#myName').val($('#inputuser').val());
      socketio.emit("connected", {user: name, time: new Date().toLocaleTimeString()});
    }

    //退室(disconnectを使わない)
    function removeuser(name) {
      $('#loginform').show();
      $('#chatform').hide();
      $('#msg').hide();
      $('#user_name_area').html('<span class="glyphicon glyphicon-user"> ユーザー名</span>:');
      $('#myName').val('');
      socketio.emit("removeuser", {user: name, time: new Date().toLocaleTimeString()});

    }

    function publishMessage() {
      socketio.emit("publish", {value: $('#message').val(), time: new Date().toLocaleTimeString() });
      $('#message').val('');
    }

    //-----------------------------------------------------
    //  ローカル→サーバーへのイベントトリガー
    //-----------------------------------------------------
    $('#send').click(function() {
      //なぜかonClickで発火しない
      publishMessage();
    });

    $('#removeuser').click(function() {
      //なぜかonClickで発火しない
      removeuser($('#inputuser').val());
    });

    $('#login').click(function() {
      //ユーザ名入力して開始
      if ($('#inputuser').val() == "") {
        alert("ユーザ名を入力してください");
        return;
      }
      var rslt = true;
      $('.userlist').each(function(){
        if ($('#inputuser').val() == $(this).text()) {
          alert("そのユーザ名は重複します")
          rslt = false
        }
      });
      if (rslt == false) {
        return;
      }
      start($('#inputuser').val());
    });

    // 3.開始処理
    var msgArea = $("#msg");
    var myName = $("#myName").val();
    //alert(login);
    var startMsg = "";
    if ($('#myName').val() != "") {
      $('#loginform').hide();
      //$('#toppage').hide();
      start(myName);
    } else {
      $('#chatform').hide();
      $('#msg').hide();
    }


  </script>

</body>
</html>
